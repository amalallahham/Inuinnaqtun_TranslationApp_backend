<% if (isAdmin) { %> <%- include('./layout/header_auth') %> <% } else { %> <%-
include('./layout/header') %> <% } %>

<link href="/css/translate.css" rel="stylesheet" />

<div class="main">
  <div class="inputWrap">
    <textarea
      id="input-text"
      class="textArea"
      rows="4"
      placeholder="Enter or paste text here"
    ></textarea>
    <div class="changeLanguageArea">
      <div id="input-lang" class="languageOption"></div>
      <!-- <button id="changeLanguageBtn" class="changeLanguageBtn hoverable hoverableBtn" onclick="reverseLanguages()"><img src="/icons/swap.png"></button> -->
      <div
        id="changeLanguageBtn"
        class="changeLanguageBtn hoverable hoverableShadow"
        onclick="reverseLanguages()"
      >
        <img src="/icons/swap.png" />
      </div>
      <div id="output-lang" class="languageOption"></div>
    </div>
    <div id="output-text" class="textArea outputText">Translation</div>
    <div id="word-details"></div>
  </div>
</div>

<script>
  const en = "English";
  const inu = "Inuinnaqtun";
  let inputLanguage = en;
  let outputLanguage = inu;

  const inputElement = document.getElementById("input-text");
  const outputElement = document.getElementById("output-text");
  const inputDescriptor = document.getElementById("input-lang");
  const outputDescriptor = document.getElementById("output-lang");
  const wordDetails = document.getElementById("word-details");

  let controller;
  let inputTimeout;
  let loadingInterval;
  let loadingIndex = 0;
  const loadingStates = [
    "Translating",
    "Translating.",
    "Translating..",
    "Translating...",
  ];

  setDescriptors();

  inputElement.addEventListener("input", () => {
    const input = inputElement.value.trim();

    if (inputTimeout) clearTimeout(inputTimeout);
    if (controller) controller.abort();

    if (input === "") {
      stopLoadingEvent();
    } else {
      controller = new AbortController();
      inputTimeout = setTimeout(() => {
        translate(input);
      }, 700);
    }
  });

  function setDescriptors() {
    inputDescriptor.innerText = inputLanguage;
    outputDescriptor.innerText = outputLanguage;
  }

  function reverseLanguages() {
    document
      .getElementById("changeLanguageBtn")
      .classList.toggle("rotateEvent");

    [inputLanguage, outputLanguage] = [outputLanguage, inputLanguage];
    [inputElement.value, outputElement.value] = [
      outputElement.value,
      inputElement.value,
    ];

    setDescriptors();

    if (inputElement.value.trim() === "") {
      stopLoadingEvent();
      outputElement.innerHTML = "Translation";
    } else {
      controller = new AbortController();
      translate(inputElement.value);
    }
  }

  function translate(input) {
    startLoadingEvent();

    fetch("/translate", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        text: input,
        sourceLang: inputLanguage,
        targetLang: outputLanguage,
      }),
      signal: controller.signal,
    })
      .then((res) => res.json())
      .then((data) => {
        stopLoadingEvent();
        displayTranslation(data);
      })
      .catch((err) => console.error("Error:", err));
  }

  function displayTranslation(data) {
    outputElement.innerHTML = "";
    const words = data.translation.split(" ");
    const details = data.recordedWords;

    for (const word of words) {
      const space = document.createTextNode(" ");

      if (details[word]) {
        const info = details[word][0];
        const wordSpan = document.createElement("span");
        wordSpan.classList.add("selectable", "notSelected");
        wordSpan.innerText = word;

        wordSpan.addEventListener("click", () => {
          getWordDetails(info._id);

          document.querySelectorAll(".selected").forEach((el) => {
            el.classList.replace("selected", "notSelected");
          });

          wordSpan.classList.replace("notSelected", "selected");
        });

        outputElement.appendChild(wordSpan);
        outputElement.appendChild(space);
      } else {
        outputElement.innerHTML += `${word} `;
      }
    }
  }

  function getWordDetails(id) {
    fetch(`/word-details/${id}`)
      .then((res) => res.json())
      .then((data) => {
        if (data.success) {
          displayWordDetails(data.details);
        } else {
          wordDetails.innerText = data.error;
        }
      })
      .catch((err) => console.error("Error:", err));
  }

  function displayWordDetails(info) {
    wordDetails.innerHTML = "";
    wordDetails.style.display = "flex";

    const container = document.createElement("div");
    container.classList.add("wordInfoBox");

    const wordTitle = document.createElement("h4");
    wordTitle.innerText = info.word;

    const translation = document.createElement("p");
    translation.innerText = `"${info.translation}"`;

    container.appendChild(wordTitle);
    container.appendChild(translation);

    if (info.audioFiles.length > 0) {
      const audio = document.createElement("audio");
      audio.src = info.audioFiles[0];

      const buttonGroup = document.createElement("div");
      buttonGroup.style.display = "flex";
      buttonGroup.style.flexDirection = "column";
      buttonGroup.style.gap = "8px";
      buttonGroup.classList.add("audioBtn");

      const playBtn = document.createElement("button");
      playBtn.classList.add("hoverable", "hoverableShadow", "noborder");
      playBtn.style.fontSize = "27px";
      playBtn.innerHTML = `<i class="fa-solid fa-volume-high"></i>`;
      playBtn.addEventListener("click", () => audio.play());

      const flagBtn = document.createElement("button");
      flagBtn.classList.add("hoverable", "hoverableShadow", "noborder");
      flagBtn.innerHTML = `<i class="fa-regular fa-flag"></i>`;
      flagBtn.title = "flag a word";
      flagBtn.style.fontSize = "27px";

      flagBtn.addEventListener("click", () => {
        window.location.href = `/admin/flag/${info.id}`;
      });

      buttonGroup.appendChild(playBtn);
      buttonGroup.appendChild(flagBtn);

      container.appendChild(buttonGroup);
      container.appendChild(audio);
    }

    wordDetails.appendChild(container);

    // Add similar words
    if (info.similarWords.length > 0) {
      for (const alt of info.similarWords) {
        const altPara = document.createElement("p");
        const link = document.createElement("span");
        link.classList.add("selectable");
        link.innerHTML = " &#8594;";
        link.addEventListener("click", () => getWordDetails(alt._id));

        altPara.innerHTML = `<i>see ${alt.prefix}</i>`;
        altPara.appendChild(link);

        wordDetails.appendChild(altPara);
      }
    }
  }

  function startLoadingEvent() {
    stopLoadingEvent();
    loadingIndex = 0;
    outputElement.innerHTML = "Translating";

    loadingInterval = setInterval(() => {
      outputElement.innerHTML = loadingStates[loadingIndex];
      loadingIndex = (loadingIndex + 1) % loadingStates.length;
    }, 400);
  }

  function stopLoadingEvent() {
    clearInterval(loadingInterval);
    outputElement.innerHTML = "";
    wordDetails.style.display = "none";
  }
</script>

<% if (isAdmin) { %> <%- include('./layout/footer_auth') %> <% } else { %> <%-
include('./layout/footer') %> <% } %>
