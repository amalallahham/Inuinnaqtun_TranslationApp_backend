<% if (isAdmin) { %>
    <%- include('./layout/header_auth') %>
<% } else { %>
    <%- include('./layout/header') %>
<% } %>

<link href="/css/translate.css" rel="stylesheet" />

    <div class="main">
        <div class="inputWrap">
            <textarea id="input-text" class="textArea" rows="4" placeholder="Enter or paste text here" ></textarea>
            <div class="changeLanguageArea">
                <div id="input-lang" class="languageOption"></div>
                <!-- <button id="changeLanguageBtn" class="changeLanguageBtn hoverable hoverableBtn" onclick="reverseLanguages()"><img src="/icons/swap.png"></button> -->
                <div id="changeLanguageBtn" class="changeLanguageBtn hoverable hoverableShadow" onclick="reverseLanguages()">
                    <img src="/icons/swap.png">
                </div>
                <div id="output-lang" class="languageOption"></div>
            </div>
            <div id="output-text" class="textArea outputText">Translation</div>
            <div id="word-details"></div>
        </div>
    </div>

    <script>
        // Lodaing event elements
        let loadingInterval; // Stores the interval ID
        let loadingStates = ["Translating", "Translating.", "Translating..", "Translating..."];
        let loadingIndex = 0;

        const en = "English";
        const inu = "Inuinnaqtun";

        let inputLanguage = en;
        let outputLanguage = inu;

        const inputDescriptor = document.getElementById("input-lang");
        const outputDescriptor = document.getElementById("output-lang");

        const inputElement = document.getElementById("input-text");
        const outputElement = document.getElementById("output-text");

        const wordDetails = document.getElementById("word-details");

        let controller;
        let inputTimeout;
        inputElement.addEventListener('input', () => {
            const input = inputElement.value;

            // Timer before request and request are cancelled if more is inputted
            if (inputTimeout) {
                clearTimeout(inputTimeout)
            }
            if (controller) {
                controller.abort();
            }


            if (input === "" || input.trim() === "") {
                stopLoadingEvent();
            } else {
                controller = new AbortController();

                //Prevents continuous requests for translation while client is typing
                inputTimeout = setTimeout(() => {
                    translate(input);
                }, 700);
            }
        });

        //Sets the language descriptors
        function setDescriptors() {
            inputDescriptor.innerHTML = inputLanguage;
            outputDescriptor.innerHTML = outputLanguage;
        }

        //Reverses the language translation
        function reverseLanguages() {
            document.getElementById("changeLanguageBtn").classList.toggle("rotateEvent");

            let temp = outputLanguage;
            outputLanguage = inputLanguage;
            inputLanguage = temp;

            temp = outputElement.value;
            outputElement.value = inputElement.value;
            inputElement.value = temp

            setDescriptors();

            if (inputElement.value === "" || inputElement.value.trim() === "") {
                stopLoadingEvent();
                outputElement.innerHTML = "Translation";
            } else {
                controller = new AbortController();
                translate(inputElement.value)
            }
        }

        //Fetches the translations
        function translate(input) {
            startLoadingEvent(); // Start loading effect

            fetch("/translate", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                    text: input,
                    sourceLang: inputLanguage,
                    targetLang: outputLanguage,
                }),
                signal: controller.signal
            })
            .then(response => response.json())
            .then(data => {
                stopLoadingEvent(); // Stop loading effect
                displayTranslation(data);
            })
            .catch(error => console.error("Error:", error));
        }

        function displayTranslation(data) {
            outputElement.innerHTML = '';
            const phrases = extractAllPhrases(data.translation);
            phrases.sort((a, b) => {
                const wordCountA = a.trim().split(/\s+/).length;
                const wordCountB = b.trim().split(/\s+/).length;
                return wordCountA - wordCountB;
            });
            const details = data.recordedWords;

            const space = document.createTextNode(" ");

            let translationWordList = data.translation.split();
            let translation = data.translation;
            for(const phrase of Object.keys(details)){
                if(translation.includes(phrase)){
                    let phraseWords = phrase.split(' ');
                    let phraseStarted = false;
                    for(let i =0; i < translationWordList.length; i++){
                        if(phraseWords[0] != translationWordList[0]){
                            if(phraseStarted){
                                translation = translationaWordList.join(" ");
                                break;
                            }
                            outputElement.innerHTML += translationWordList[0];
                            translationWordList.shift();
                        } else {
                            translationWordList.shift();
                            phraseWords.shift();
                            phraseStarted = true;
                        }
                    }

                    const info = details[phrase][0];
                    const wordSpan = document.createElement('span');

                    outputElement.appendChild(wordSpan);
                    outputElement.appendChild(space);

                    wordSpan.classList.add('selectable', 'notSelected');
                    wordSpan.innerHTML = phrase;

                    wordSpan.addEventListener('click', ()=> {
                        getWordDetails(info._id);
                        const selectedElements = document.getElementsByClassName('selected');
                        for(const element of selectedElements){
                            element.classList.replace('selected', 'notSelected');
                        }

                        wordSpan.classList.replace('notSelected', 'selected');
                    });
            
                }
                
            }
        }

        function extractAllPhrases(translation) {
            const words = translation.split(' ');
            const phrases = [];

            for (let start = 0; start < words.length; start++) {
                for (let end = start + 1; end <= words.length; end++) {
                const phrase = words.slice(start, end).join(' ');
                phrases.push(phrase);
                }
            }

            return phrases;
        }


        function getWordDetails(id){
            fetch(`/word-details/${id}`, {
                method: "GET"
            })
            .then(response => response.json())
            .then(data => {
                if(data.success){
                    displayWordDetails(data.details);
                } else {
                    wordDetails.innerHTML = data.error;
                }
                
            })
            .catch(error => console.error("Error:", error));
        }

        function displayWordDetails(info){
            while (wordDetails.firstChild) wordDetails.removeChild(wordDetails.firstChild);
            document.getElementById("word-details").style.display = "flex";

            const describedWord = document.createElement('h4');
            const englishEquivalent = document.createElement('p');

            if(info['audioFiles'].length > 0){
                const audio = document.createElement('audio');
                const playButton = document.createElement('button');
                playButton.classList.add("audioBtn");
                playButton.classList.add("hoverable");
                playButton.classList.add("hoverableShadow");

                wordDetails.appendChild(playButton);
                wordDetails.appendChild(audio);

                playButton.innerHTML = `<img src="/icons/volume.png">`;
                audio.src = info['audioFiles'][0];
                playButton.addEventListener('click', ()=>{
                    audio.play();
                });
            }
                
            describedWord.innerHTML = info['word'];
            englishEquivalent.innerHTML = `"${info['translation']}"`;
   
            wordDetails.appendChild(describedWord);
            wordDetails.appendChild(englishEquivalent);

            const similarWords = info['similarWords'];
            if(similarWords.length > 0){
                for(const altWord of similarWords){
                    const alternativeWord = document.createElement('p');
                    const linkArrow = document.createElement('span');
                    linkArrow.innerHTML = '&#8594;';
                    alternativeWord.innerHTML = `<i>see ${altWord.prefix}</i>`;
                    alternativeWord.appendChild(linkArrow);
                    wordDetails.appendChild(alternativeWord);


                    linkArrow.classList.add('selectable');
                    linkArrow.addEventListener('click', ()=>{
                        getWordDetails(altWord._id);
                    });
                }
            }
        }

        setDescriptors();

        // Loading Event
        function startLoadingEvent() {
            stopLoadingEvent(); // Ensure no previous interval is running
            loadingIndex = 0;
            outputElement.innerHTML = "Translating";

            loadingInterval = setInterval(() => {
                outputElement.innerHTML = loadingStates[loadingIndex];
                loadingIndex = (loadingIndex + 1) % loadingStates.length;
            }, 400);
        }

        function stopLoadingEvent() {
            clearInterval(loadingInterval);
            outputElement.innerHTML = "";
            // outputElement.placeholder = "Translation";
        }
    </script>
    
<% if (isAdmin) { %>
    <%- include('./layout/footer_auth') %>
<% } else { %>
    <%- include('./layout/footer') %>
<% } %>